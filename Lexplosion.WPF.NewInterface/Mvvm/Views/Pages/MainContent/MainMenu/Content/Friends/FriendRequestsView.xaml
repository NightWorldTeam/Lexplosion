<UserControl
    x:Class="Lexplosion.WPF.NewInterface.Mvvm.Views.Pages.MainContent.MainMenu.FriendsRequestsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:auth="clr-namespace:Lexplosion.WPF.NewInterface.Mvvm.Views.Pages.Authorization"
    xmlns:controls="clr-namespace:Lexplosion.WPF.NewInterface.Controls"
    xmlns:converters="clr-namespace:Lexplosion.WPF.NewInterface.Core.Converters"
    xmlns:core="clr-namespace:Lexplosion.WPF.NewInterface.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:Lexplosion.WPF.NewInterface.Extensions"
    xmlns:lexplosion="clr-namespace:Lexplosion;assembly=Lexplosion.Core"
    xmlns:local="clr-namespace:Lexplosion.WPF.NewInterface.Mvvm.Views.Pages.MainContent.MainMenu"
    xmlns:mainmenu="clr-namespace:Lexplosion.WPF.NewInterface.Mvvm.ViewModels.MainContent.MainMenu"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:objects="clr-namespace:Lexplosion.WPF.NewInterface.Core.Objects"
    d:DataContext="{d:DesignInstance Type=mainmenu:FriendRequestsViewModel}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">

    <UserControl.Resources>

        <Style x:Key="EveryEvenUser" TargetType="{x:Type FrameworkElement}">
            <Setter Property="Margin" Value="4,0,0,0" />
        </Style>

        <DataTemplate x:Key="PendingRequestUser" DataType="{x:Type objects:NightWorldUserRequest}">
            <Border
                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Converter={converters:WindowWidthToXProcentWidth}, ConverterParameter=22}"
                MinWidth="300"
                MaxHeight="64"
                Margin="0,0,4,4"
                Padding="16,13"
                HorizontalAlignment="Stretch"
                Background="{DynamicResource FriendSolidColorBrush}"
                BorderBrush="{DynamicResource FriendBorderSolidColorBrush}"
                BorderThickness="1"
                CornerRadius="5">
                <Grid HorizontalAlignment="Stretch">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Button
                        Width="38"
                        Height="38"
                        Margin="0,0,8,0"
                        Cursor="Hand">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">

                                <Grid Width="38" Height="38">

                                    <!--  Avatar  -->
                                    <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                                        <Border
                                            Width="38"
                                            Height="38"
                                            BorderBrush="{DynamicResource SeparateSolidColorBrush}"
                                            BorderThickness="1"
                                            CornerRadius="2" />

                                        <Border
                                            x:Name="AvatarBorder"
                                            Width="38"
                                            Height="38"
                                            Background="{Binding AvatarUrl, Converter={converters:ImageSourceNullValidateConverter}}"
                                            CornerRadius="2" />

                                        <controls:CircleLoader
                                            x:Name="AvatarLoader"
                                            Width="16"
                                            Height="16"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            BlurTarget="{Binding ElementName=AvatarBorder}"
                                            IsActive="{Binding AvatarUrl, Converter={converters:IsValueNullConverter}}" />
                                    </Grid>

                                    <Border
                                        x:Name="IconBorder"
                                        CornerRadius="5"
                                        Visibility="Collapsed">

                                        <Border.Background>
                                            <SolidColorBrush Opacity="0.3" Color="Black" />
                                        </Border.Background>

                                        <Viewbox
                                            Height="24"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center">
                                            <Path
                                                extensions:PathExtensions.StringKeyData="Profile"
                                                Fill="{DynamicResource CheckBoxMarkSolidColorBrush}"
                                                Stretch="Fill" />
                                        </Viewbox>
                                    </Border>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <!--  TODO: Smooth Animation  -->
                                    <!--<Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="AvatarBorder" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect />
                                            </Setter.Value>
                                        </Setter>
                                    -->
                                    <!--  TODO: Для профиля пользователей вернуть на Visible  -->
                                    <!--
                                        <Setter TargetName="IconBorder" Property="Visibility" Value="Collapsed" />
                                    </Trigger>-->

                                    <!--<DataTrigger Binding="{Binding AvatarUrl}" Value="{x:Null}">
                                        <Setter TargetName="AvatarBorder" Property="Background">
                                            <Setter.Value>
                                                <ImageBrush ImageSource="pack://Application:,,,/Assets/images/icons/non_image.png" />
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>-->
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <StackPanel Grid.Column="1">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock
                                FontSize="14"
                                FontWeight="Medium"
                                Foreground="{DynamicResource PrimaryForegroundSolidColorBrush}"
                                Text="{Binding Login}" />

                            <Border
                                Width="10"
                                Height="10"
                                Margin="8,1,0,0"
                                BorderBrush="{DynamicResource SeparateSolidColorBrush}"
                                BorderThickness="1"
                                CornerRadius="10">
                                <Border.Style>
                                    <Style TargetType="{x:Type Border}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Online}">
                                                <Setter Property="Background" Value="#009834" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Offline}">
                                                <Setter Property="Background" Value="Gray" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.NotDisturb}">
                                                <Setter Property="Background" Value="Orange" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Background" Value="{DynamicResource ActivitySolidColorBrush}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                        </StackPanel>

                        <Grid Margin="0,2,0,0">

                            <!--  Current Activity  -->
                            <TextBlock
                                FontSize="12"
                                FontWeight="Medium"
                                Foreground="{DynamicResource SecondaryForegroundSolidColorBrush}"
                                TextTrimming="CharacterEllipsis">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Online}">
                                                <Setter Property="Text" Value="{DynamicResource Online}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Offline}">
                                                <Setter Property="Text" Value="{DynamicResource Offline}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.NotDisturb}">
                                                <Setter Property="Text" Value="{DynamicResource DoNotDisturb}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <!--  InGame Status  -->
                            <TextBlock
                                FontSize="10"
                                FontWeight="Medium"
                                Foreground="{DynamicResource SecondaryForegroundSolidColorBrush}"
                                TextTrimming="CharacterEllipsis">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>

                                <Run FontSize="10" Text="{DynamicResource PlayingIn}" />
                                <Run FontSize="10" Text="{Binding RunningClientName, Mode=OneWay}" />
                            </TextBlock>
                        </Grid>
                    </StackPanel>


                    <!--  Action Button  -->
                    <StackPanel
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal">
                        <controls:AdvancedButton
                            Width="32"
                            Height="32"
                            Margin="0,0,8,0"
                            HorizontalContentAlignment="Center"
                            Command="{Binding DataContext.AddFriendCommand, RelativeSource={RelativeSource AncestorLevel=2, AncestorType={x:Type UserControl}}}"
                            CommandParameter="{Binding}"
                            Cursor="Hand"
                            Foreground="{DynamicResource ActivitySolidColorBrush}"
                            IconData="{DynamicResource PDAddPerson}"
                            IconPadding="0,8"
                            Style="{StaticResource HalfOpacityAdvancedButton}"
                            ToolTip="{DynamicResource AcceptFriendRequest}" />

                        <controls:AdvancedButton
                            Width="32"
                            Height="32"
                            HorizontalContentAlignment="Center"
                            Command="{Binding DataContext.DeclineFriendRequestCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                            CommandParameter="{Binding}"
                            Cursor="Hand"
                            Foreground="{DynamicResource ActivitySolidColorBrush}"
                            IconData="{DynamicResource PDRemovePerson}"
                            IconPadding="0,8"
                            Style="{StaticResource HalfOpacityAdvancedButton}"
                            ToolTip="{DynamicResource DeclineFriendRequest}" />
                    </StackPanel>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="OutgoingRequestUser" DataType="{x:Type objects:NightWorldUserRequest}">
            <Border
                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Converter={converters:WindowWidthToXProcentWidth}, ConverterParameter=22}"
                MinWidth="300"
                MinHeight="64"
                Margin="0,0,4,4"
                Padding="16,13"
                HorizontalAlignment="Stretch"
                Background="{DynamicResource FriendSolidColorBrush}"
                BorderBrush="{DynamicResource FriendBorderSolidColorBrush}"
                BorderThickness="1"
                CornerRadius="5">
                <Grid HorizontalAlignment="Stretch">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Button
                        Width="38"
                        Height="38"
                        Margin="0,0,8,0"
                        Cursor="Hand">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">

                                <Grid Width="38" Height="38">

                                    <!--  Avatar  -->
                                    <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                                        <Border
                                            Width="38"
                                            Height="38"
                                            BorderBrush="{DynamicResource SeparateSolidColorBrush}"
                                            BorderThickness="1"
                                            CornerRadius="2" />

                                        <Border
                                            x:Name="AvatarBorder"
                                            Width="38"
                                            Height="38"
                                            Background="{Binding AvatarUrl, Converter={converters:ImageSourceNullValidateConverter}}"
                                            CornerRadius="2" />

                                        <controls:CircleLoader
                                            x:Name="AvatarLoader"
                                            Width="16"
                                            Height="16"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            BlurTarget="{Binding ElementName=AvatarBorder}"
                                            IsActive="{Binding AvatarUrl, Converter={converters:IsValueNullConverter}}" />
                                    </Grid>

                                    <!--<Border
                                        x:Name="IconBorder"
                                        CornerRadius="5"
                                        Visibility="Collapsed">

                                        <Border.Background>
                                            <SolidColorBrush Opacity="0.3" Color="Black" />
                                        </Border.Background>

                                        <Viewbox
                                            Height="24"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center">
                                            <Path
                                                extensions:PathExtensions.StringKeyData="Profile"
                                                Fill="{DynamicResource CheckBoxMarkSolidColorBrush}"
                                                Stretch="Fill" />
                                        </Viewbox>
                                    </Border>-->
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <!--  TODO: Smooth Animation  -->
                                    <!--<Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="AvatarBorder" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect />
                                            </Setter.Value>
                                        </Setter>

                                    -->
                                    <!--  TODO: Для профиля пользователей вернуть на Visible  -->
                                    <!--
                                        <Setter TargetName="IconBorder" Property="Visibility" Value="Collapsed" />
                                    </Trigger>

                                    <DataTrigger Binding="{Binding AvatarUrl}" Value="{x:Null}">
                                        <Setter TargetName="AvatarBorder" Property="Background">
                                            <Setter.Value>
                                                <ImageBrush ImageSource="pack://Application:,,,/Assets/images/icons/non_image.png" />
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>-->
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <StackPanel Grid.Column="1">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock
                                FontSize="14"
                                FontWeight="Medium"
                                Foreground="{DynamicResource PrimaryForegroundSolidColorBrush}"
                                Text="{Binding Login}" />

                            <Border
                                Width="10"
                                Height="10"
                                Margin="8,1,0,0"
                                BorderBrush="{DynamicResource SeparateSolidColorBrush}"
                                BorderThickness="1"
                                CornerRadius="10">
                                <Border.Style>
                                    <Style TargetType="{x:Type Border}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Online}">
                                                <Setter Property="Background" Value="#009834" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Offline}">
                                                <Setter Property="Background" Value="Gray" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.NotDisturb}">
                                                <Setter Property="Background" Value="Orange" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Background" Value="{DynamicResource ActivitySolidColorBrush}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                        </StackPanel>

                        <Grid Margin="0,2,0,0">

                            <!--  Current Activity  -->
                            <TextBlock
                                FontSize="12"
                                FontWeight="Medium"
                                Foreground="{DynamicResource SecondaryForegroundSolidColorBrush}"
                                TextTrimming="CharacterEllipsis">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Online}">
                                                <Setter Property="Text" Value="{DynamicResource Online}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.Offline}">
                                                <Setter Property="Text" Value="{DynamicResource Offline}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.NotDisturb}">
                                                <Setter Property="Text" Value="{DynamicResource DoNotDisturb}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <!--  InGame Status  -->
                            <TextBlock
                                FontSize="10"
                                FontWeight="Medium"
                                Foreground="{DynamicResource SecondaryForegroundSolidColorBrush}"
                                TextTrimming="CharacterEllipsis">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Status}" Value="{x:Static lexplosion:ActivityStatus.InGame}">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>

                                <Run FontSize="10" Text="{DynamicResource PlayingIn}" />
                                <Run FontSize="10" Text="{Binding RunningClientName, Mode=OneWay}" />
                            </TextBlock>
                        </Grid>
                    </StackPanel>

                    <!--  Action Button  -->
                    <controls:AdvancedButton
                        Grid.Column="2"
                        Width="32"
                        Height="32"
                        HorizontalAlignment="Right"
                        HorizontalContentAlignment="Center"
                        Command="{Binding DataContext.DeclineFriendRequestCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                        CommandParameter="{Binding}"
                        Foreground="{DynamicResource ActivitySolidColorBrush}"
                        IconData="{DynamicResource PDRemovePerson}"
                        IconPadding="0,8"
                        Style="{StaticResource HalfOpacityAdvancedButton}"
                        ToolTip="{DynamicResource CancelFriendRequest}" />
                </Grid>
            </Border>
        </DataTemplate>

        <Style x:Key="SegmentedListBoxItem" TargetType="{x:Type ListBoxItem}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource SecondaryForegroundSolidColorBrush}" />
            <Setter Property="Padding" Value="11,0" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border
                            x:Name="border"
                            Height="{TemplateBinding Height}"
                            MinHeight="22"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}">
                            <ContentPresenter
                                x:Name="content"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FocusVisualStyle="{x:Null}" />
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource ActivitySolidColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource DefaultButtonForegroundColorBrush}" />
                                <Setter Property="TextBlock.Foreground" Value="{DynamicResource DefaultButtonForegroundColorBrush}" />
                                <Setter TargetName="border" Property="CornerRadius" Value="2" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SegmentedListBox" TargetType="{x:Type ListBox}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Height" Value="32" />
            <Setter Property="Background" Value="{DynamicResource PrimarySolidColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource SeparateSolidColorBrush}" />
            <Setter Property="ItemContainerStyle" Value="{StaticResource SegmentedListBoxItem}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border
                            x:Name="border"
                            Height="{TemplateBinding Height}"
                            MinHeight="22"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="5">
                            <ScrollViewer
                                Margin="0"
                                Focusable="false"
                                VerticalScrollBarVisibility="Disabled">
                                <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid
        Margin="32,8"
        Background="Transparent"
        ShowGridLines="False">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid HorizontalAlignment="Stretch" Background="Transparent">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ListBox
                x:Name="segmented"
                SelectedIndex="0"
                Style="{StaticResource SegmentedListBox}">

                <core:SegmentItem Value="Pending">
                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Text="{DynamicResource Pending}" />
                </core:SegmentItem>

                <core:SegmentItem Value="Outgoing">
                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Text="{DynamicResource Outgoing}" />
                </core:SegmentItem>

            </ListBox>

            <controls:SearchBox
                Grid.Column="1"
                Margin="16,8"
                Placeholder="{DynamicResource TypingNicknamePlaceholder}"
                Style="{StaticResource sm-searchbox-default}"
                Text="{Binding Model.SearchBoxText, UpdateSourceTrigger=PropertyChanged}" />

        </Grid>

        <core:Switch
            Grid.Row="1"
            Margin="0,0,-32,0"
            VerticalAlignment="Stretch"
            FocusVisualStyle="{x:Null}"
            SelectedExpression="{Binding SelectedItem.Value, ElementName=segmented}">
            <core:Switch.Cases>

                <core:SwitchCaseItem Key="Pending">
                    <Grid>
                        <controls:Empty
                            Grid.Row="1"
                            CollectionCount="{Binding Model.Incoming.Count}"
                            Description="{DynamicResource ThereAreNoIncomingFriendRequests}" />

                        <ListBox
                            Grid.Row="1"
                            HorizontalAlignment="Stretch"
                            AlternationCount="3"
                            ItemTemplate="{StaticResource PendingRequestUser}"
                            ItemsSource="{Binding Model.Incoming}"
                            Style="{StaticResource TransparentListBox}">

                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel
                                        HorizontalAlignment="Left"
                                        IsItemsHost="True"
                                        VirtualizingPanel.IsVirtualizing="True" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                        </ListBox>
                    </Grid>
                </core:SwitchCaseItem>

                <core:SwitchCaseItem Key="Outgoing">
                    <Grid>
                        <controls:Empty
                            Grid.Row="1"
                            CollectionCount="{Binding Model.Outgoing.Count}"
                            Description="{DynamicResource ThereAreNoOutgoingFriendRequests}" />

                        <ListBox
                            Grid.Row="1"
                            HorizontalAlignment="Stretch"
                            ItemTemplate="{StaticResource OutgoingRequestUser}"
                            ItemsSource="{Binding Model.Outgoing}"
                            SizeChanged="ItemsControl_SizeChanged"
                            Style="{StaticResource TransparentListBox}">

                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel
                                        HorizontalAlignment="Left"
                                        IsItemsHost="True"
                                        VirtualizingPanel.IsVirtualizing="True" />
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                    </Grid>
                </core:SwitchCaseItem>

            </core:Switch.Cases>
        </core:Switch>
    </Grid>
</UserControl>
